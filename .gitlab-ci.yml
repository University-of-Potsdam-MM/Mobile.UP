# General info: https://docs.gitlab.com/ee/ci/yaml/
#
# Requires several environment variables to be set in Git.UP (most should be protected):
#  * SSH_DEPLOY_HOSTS (one host per line, if multiple)
#  * SSH_DEPLOY_KEY (SSH-key for the gitup-deploy user)
#  * SSH_KNOWN_HOSTS (hosts keys of the servers to which the artifacts should be deployed; `ssh-keyscan hostname`)
# except SSH_DEPLOY_HOSTS and SSH_DEPLOY_KEY all variables can be set in the Group

image: node:14

stages:
  - prepare
  - build
  - deploy

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - android-sdk-linux/
    - .npm/

variables:
  GIT_SUBMODULE_STRATEGY: recursive

install_dependencies:
  stage: prepare
  script:
    - npm ci --cache .npm --prefer-offline
    - npm install -g @ionic/cli
    - npm install
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 day
  except:
    refs:
      - tags

.compodoc:
  stage: build
  cache:
    policy: pull
  script:
    - npm run doc
  artifacts:
    paths:
      - documentation/
    expire_in: 1 day
  only:
    - master
  except:
    refs:
      - tags

.android:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    ANDROID_SDK_URL: https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip
    ANDROID_API: "android-30"
    ANDROID_BUILD_TOOLS: "30.0.3"
    ANDROID_HOME: $CI_PROJECT_DIR/android-sdk-linux/
    ANDROID_SDK_ROOT: $CI_PROJECT_DIR/android-sdk-linux/
  before_script:
    - apt-get update; apt-get install -y openjdk-8-jdk gradle
    - if [ ! -d android-sdk-linux ] || [ ! -d android-sdk-linux/tools/bin ] || [ ! -d android-sdk-linux/build-tools/$ANDROID_BUILD_TOOLS/ ] || [ ! -d android-sdk-linux/platform-tools/ ];
      then
        rm -rf android-sdk-linux/;
        mkdir android-sdk-linux;
        pushd android-sdk-linux;
          wget -O tools.zip $ANDROID_SDK_URL && unzip tools.zip -d tools && rm -f tools.zip;
          set +o pipefail;
          yes | tools/cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --licenses;
          set -o pipefail;
          tools/cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "platform-tools" "platforms;$ANDROID_API" "build-tools;$ANDROID_BUILD_TOOLS";
        popd;
      fi
    - export PATH=$ANDROID_SDK_ROOT/tools/cmdline-tools/bin/:$ANDROID_SDK_ROOT/platform-tools/:$ANDROID_SDK_ROOT/build-tools/$ANDROID_BUILD_TOOLS/:$PATH
    - npm install -g @ionic/cli
  script:
    - $PWD/fillCredentials.sh "src/assets/config.dist.json" "ACCESS_TOKEN BASIC_AUTH_STRING ACCESS_TOKEN_NEW BASIC_AUTH_STRING_NEW"
    - rm -rf $PWD/android/app/build
    - ionic capacitor sync android --prod
    - cd android && ./gradlew assembleRelease
    - cd .. && zipalign -v 4 $PWD/android/app/build/outputs/apk/release/app-release-unsigned.apk MobileUP-unsigned.apk

# only used for merge requests (and branches != master in order to avoid double building)
android-test:
  extends: .android
  # keep built artifacts on Git.UP for one week for manual testing/inspection
  artifacts:
    paths:
      - MobileUP-unsigned.apk
    expire_in: 1 week
  except:
    refs:
      - master
      - tags

# special job for building and keeping the artifacts for production, only executed for master
android-production:
  extends: .android
  after_script:
    - if [ ! -f "MobileUP-unsigned.apk" ]; then
        exit 1;
      fi
    - export PATH=$ANDROID_SDK_ROOT/tools/bin/:$ANDROID_SDK_ROOT/platform-tools/:$ANDROID_SDK_ROOT/build-tools/$ANDROID_BUILD_TOOLS/:$PATH
    - echo "$KEYSTORE" | base64 -d > keystore
    - jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore keystore -storepass:env KEYSTORE_PASS MobileUP-unsigned.apk /my-release-key
    - zipalign -v 4 MobileUP-unsigned.apk MobileUP.apk
  # keep built artifacts on Git.UP for one month for manual testing/inspection, final versions are published on Google PlayStore anyway
  artifacts:
    paths:
      - MobileUP.apk
    expire_in: 1 month
  only:
    - master
  except:
    refs:
      - tags

.browser:
  stage: build
  before_script:
    - npm install -g @ionic/cli
  script:
    - ./fillCredentials.sh "src/assets/config.dist.json" "ACCESS_TOKEN BASIC_AUTH_STRING ACCESS_TOKEN_NEW BASIC_AUTH_STRING_NEW"
    - ionic build --prod

# only used for merge requests (and branches != master in order to avoid double building)
browser-test:
  extends: .browser
  # keep built artifacts on Git.UP for one day for manual testing/inspection
  artifacts:
    paths:
      - www/
    expire_in: 1 day
  except:
    refs:
      - master
      - tags

# special job for building and keeping the artifacts for production, only executed for master
browser-production:
  extends: .browser
  # keep built artifacts on Git.UP, only do this for builds on master branch we want to deploy in order to save space on Git.UP
  artifacts:
    paths:
      - www/
  only:
    - master
  except:
    refs:
      - tags

deploy-browser-production:
  stage: deploy
  cache: {}
  dependencies:
    - browser-production
  before_script:
    - mkdir /root/.ssh
    - chmod 700 /root/.ssh
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' > /root/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - if [ -z "$SSH_DEPLOY_HOSTS" ]; then echo "no servers (SSH_DEPLOY_HOSTS) defined."; exit 1; fi
    - for server in $SSH_DEPLOY_HOSTS; do
        tar cfz - www/ | ssh -i /root/.ssh/id_rsa gitup-deploy@$server;
      done
  # uncomment to only deploy manually and not on every push
  #when: manual
  #allow_failure: false
  only:
    - master
  except:
    refs:
      - tags

# .ios:
#   stage: build
#   variables:
#     GIT_SUBMODULE_STRATEGY: recursive
#   before_script:
#     - npm install -g @ionic/cli
#   script:
#     - ./fillCredentials.sh "src/assets/config.dist.json" "ACCESS_TOKEN BASIC_AUTH_STRING ACCESS_TOKEN_NEW BASIC_AUTH_STRING_NEW"
#     - rm -rf $PWD/ios/ios_build
#     - ionic capacitor sync ios --prod

# # only used for merge requests (and branches != master in order to avoid double building)
# ios-test:
#   extends: .ios
#   tags:
#     - mac
#   except:
#     refs:
#       - master
#       - tags

# ios-production:
#   extends: .ios
#   after_script:
#     - xcodebuild -workspace $PWD/ios/App/App.xcworkspace -scheme App -sdk iphoneos -configuration AppStoreDistribution archive -archivePath $PWD/ios/ios_build/archive/Mobile.UP.xcarchive
#     - xcodebuild -exportArchive -archivePath $PWD/ios/ios_build/archive/Mobile.UP.xcarchive -exportOptionsPlist $PWD/ios/App/exportOptions.plist -exportPath $PWD/ios/ios_build/ipa -allowProvisioningUpdates
#   only:
#     - master
#   artifacts:
#     paths:
#       - $PWD/ios/ios_build/ipa/App.ipa
#     expire_in: 1 week
#   tags:
#     - mac
#   except:
#     refs:
#       - tags
