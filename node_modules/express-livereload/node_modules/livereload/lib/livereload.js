// Generated by CoffeeScript 1.6.3
(function() {
  var Server, defaultAlias, defaultExclusions, defaultExts, defaultPort, fs, http, merge, path, url, version, watchr, ws,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  ws = require('websocket.io');

  http = require('http');

  url = require('url');

  watchr = require('watchr');

  version = '1.6';

  defaultPort = 35729;

  defaultExts = ['html', 'css', 'js', 'png', 'gif', 'jpg', 'php', 'php5', 'py', 'rb', 'erb', 'coffee', 'styl', 'jade'];

  defaultAlias = {
    'styl': 'css'
  };

  defaultExclusions = ['.git/', '.svn/', '.hg/'];

  merge = function(obj1, obj2) {
    var key, value, _obj;
    _obj = {};
    for (key in obj1) {
      value = obj1[key];
      _obj[key] = value;
    }
    for (key in obj2) {
      value = obj2[key];
      _obj[key] = value;
    }
    return _obj;
  };

  Server = (function() {
    function Server(config) {
      var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7;
      this.config = config;
      this.watch = __bind(this.watch, this);
      if (this.config == null) {
        this.config = {};
      }
      if ((_base = this.config).version == null) {
        _base.version = version;
      }
      if ((_base1 = this.config).port == null) {
        _base1.port = defaultPort;
      }
      if ((_base2 = this.config).exts == null) {
        _base2.exts = [];
      }
      if ((_base3 = this.config).exclusions == null) {
        _base3.exclusions = [];
      }
      if ((_base4 = this.config).alias == null) {
        _base4.alias = {};
      }
      if ((_base5 = this.config).delay == null) {
        _base5.delay = 0;
      }
      this.config.exts = this.config.exts.concat(defaultExts);
      this.config.exclusions = this.config.exclusions.concat(defaultExclusions);
      this.config.alias = merge(defaultAlias, this.config.alias);
      if ((_base6 = this.config).applyJSLive == null) {
        _base6.applyJSLive = false;
      }
      if ((_base7 = this.config).applyCSSLive == null) {
        _base7.applyCSSLive = true;
      }
      this.sockets = [];
    }

    Server.prototype.listen = function() {
      this.debug("LiveReload is waiting for browser to connect.");
      if (this.config.server) {
        this.config.server.listen(this.config.port);
        this.server = ws.attach(this.config.server);
      } else {
        this.server = ws.listen(this.config.port);
      }
      this.server.on('connection', this.onConnection.bind(this));
      return this.server.on('close', this.onClose.bind(this));
    };

    Server.prototype.onConnection = function(socket) {
      var _this = this;
      this.debug("Browser connected.");
      socket.on('error', function(err) {
        var idx;
        _this.debug("Browser disconnected.");
        idx = _this.sockets.indexOf(socket);
        return _this.sockets.splice(idx, 1);
      });
      socket.send("!!ver:" + this.config.version);
      socket.on('message', function(message) {
        return _this.debug("Browser URL: " + message);
      });
      return this.sockets.push(socket);
    };

    Server.prototype.onClose = function(socket) {
      return this.debug("Browser disconnected.");
    };

    Server.prototype.watch = function(source) {
      var exclusions, exts,
        _this = this;
      exts = this.config.exts;
      exclusions = this.config.exclusions;
      return watchr.watch({
        path: source,
        ignoreHiddenFiles: true,
        listener: function(eventName, filePath, fileCurrentStat, filePreviousStat) {
          var exclusion, ext, _i, _j, _len, _len1, _results;
          for (_i = 0, _len = exclusions.length; _i < _len; _i++) {
            exclusion = exclusions[_i];
            if (filePath.match(exclusion)) {
              return;
            }
          }
          _results = [];
          for (_j = 0, _len1 = exts.length; _j < _len1; _j++) {
            ext = exts[_j];
            if (filePath.match("\." + ext + "$")) {
              _results.push(_this.refresh(filePath));
            }
          }
          return _results;
        }
      });
    };

    Server.prototype.refresh = function(filepath) {
      var aliasExt, data, ext, socket, _i, _len, _ref,
        _this = this;
      this.debug("Refresh: " + filepath);
      ext = path.extname(filepath).substr(1);
      aliasExt = this.config.alias[ext];
      if (aliasExt != null) {
        this.debug("and aliased to " + aliasExt);
        filepath = filepath.replace("." + ext, "." + aliasExt);
      }
      data = JSON.stringify([
        'refresh', {
          path: filepath,
          apply_js_live: this.config.applyJSLive,
          apply_css_live: this.config.applyCSSLive
        }
      ]);
      if (this.config.delay === 0) {
        _ref = this.sockets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          socket = _ref[_i];
          socket.send(data);
        }
      } else {
        clearTimeout(this.delayTimeout);
        this.delayTimeout = setTimeout(function() {
          var _j, _len1, _ref1, _results;
          _ref1 = _this.sockets;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            socket = _ref1[_j];
            _results.push(socket.send(data));
          }
          return _results;
        }, this.config.delay);
      }
    };

    Server.prototype.debug = function(str) {
      if (this.config.debug) {
        return console.log("" + str + "\n");
      }
    };

    return Server;

  })();

  exports.createServer = function(config) {
    var app, server;
    app = http.createServer(function(req, res) {
      if (url.parse(req.url).pathname === '/livereload.js') {
        res.writeHead(200, {
          'Content-Type': 'text/javascript'
        });
        return res.end(fs.readFileSync(__dirname + '/../ext/livereload.js'));
      }
    });
    if (config.server == null) {
      config.server = app;
    }
    server = new Server(config);
    server.listen();
    return server;
  };

}).call(this);
