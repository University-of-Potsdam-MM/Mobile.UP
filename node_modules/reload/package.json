{
  "name": "reload",
  "version": "0.1.0",
  "description": "Node.js module to refresh and reload your code in your browser when your code changes. No browser plugins required.",
  "repository": {
    "type": "git",
    "url": "git@github.com:jprichardson/reload.git"
  },
  "keywords": [
    "reload",
    "refresh",
    "http",
    "express",
    "development"
  ],
  "author": {
    "name": "JP Richardson",
    "email": "jprichardson@gmail.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": ""
    }
  ],
  "dependencies": {
    "sockjs": "~0.3.5",
    "supervisor": "~0.5.6",
    "commander": "~2.0.0",
    "express": "~3.4.0",
    "cli-color": "~0.2.3",
    "open": "0.0.4",
    "death": "~0.1.0"
  },
  "devDependencies": {},
  "main": "./lib/reload.js",
  "scripts": {
    "test": "mocha test"
  },
  "bin": {
    "reload": "./bin/reload"
  },
  "readme": "reload\n=======\n\nRefresh and reload your code in your browser when your code changes. No browser plugins required. Use with Node.js if you like.\n\n\n\nWhy?\n----\n\nRestarting your Http server and refreshing your browser is annoying.\n\n\n\nInstallation\n------------\n\n    npm install [-g] [--save-dev] reload\n\n\n\nExample for Node.js and browser development\n--------------------------------------------\n\nUse in conjunction with [supervisor](https://github.com/isaacs/node-supervisor), [nodemon](https://github.com/remy/nodemon), or [forever](https://github.com/nodejitsu/forever).\n\nI recommend `supervisor`, since `nodedemon` time to poll for file changes is too slow and not configurable. Supervisor will feel fast. `forever` tries to do too much. Whenever I look at the docs, I get frustrated and give up.\n\n\n**server.js:**\n```javascript\nvar express = require('express')\n  , http = require('http')\n  , path = require('path')\n  , reload = require('reload')\n\nvar app = express()\n\nvar publicDir = path.join(__dirname, 'public')\n\napp.configure(function() {\n  app.set('port', process.env.PORT || 3000)\n  app.use(express.logger('dev'))\n  app.use(express.bodyParser()) //parses json, multi-part (file), url-encoded\n  app.use(app.router) //need to be explicit, (automatically adds it if you forget)\n  app.use(express.static(clientDir)) //should cache static assets\n})\n\napp.get('/', function(req, res) {\n  res.sendfile(path.join(publicDir, 'index.html'))\n})\n\nvar server = http.createServer(app)\n\n//reload code here\nreload(server, app)\n\nserver.listen(app.get('port'), function(){\n  console.log(\"Web server listening on port \" + app.get('port'));\n});\n```\n\n**public/index.html:** (very valid HTML5, watch the YouTube video)\n```html\n<!-- \n  watch this: http://www.youtube.com/watch?v=WxmcDoAxdoY \n-->\n<!doctype html>\n<meta charset=\"utf-8\">\n<title>My sweet app!</title>\n\n<!-- all you have to do is include the reload script -->\n<script src=\"/reload/reload.js\"></script>\n\n<h1>Hello!</h1>\n```\n\ninstall supervisor:\n```\nnpm install -g supervisor\n```\n\nreload on any html or js file change:\n```\nsupervisor -e 'html|js' node server.js\n```\n\n\n\nExample for browser development only\n-------------------------------------\n\nYou should install `reload` globally like `npm install -g reload`. Then you can use the `reload` command in your directory without modifying any of your HTML.\n\nUsage:\n\n```\n\nUsage: reload [options]\n\nOptions:\n\n  -h, --help               output usage information\n  -V, --version            output the version number\n  -b, --browser            Open in the browser automatically.\n  -d, --dir [dir]          The directory to serve up. Defaults to current dir.\n  -e, --exts [extensions]  Extensions separated by commas or pipes. Defaults to html,js,css.\n  -p, --port [port]        The port to bind to. Can be set with PORT env variable as well. Defaults to 8080\n  -t, --time [delay]       How long (ms) should the browser wait before reconnecting? Defaults to 300 ms.\n\n```\n\nNavigate to your html directory:\n\n    reload -b\n\nthis will open your `index.html` file in the browser. Any changes that you make will now reload in the browser. You don't need to modify your HTML at all.\n\n\n\nHow does it work?\n-----------------\n\nIt's actually stupidly simple. We leverage `supervisor` to restart the server if any file changes. The client side keeps a websocket open, once the websocket closes, the client sets a timeout to reload in approximately 300 ms. Simple huh?\n\n\n\nAPI\n---\n\n### reload(httpServer, expressApp, [timeout_millis])\n\n- `httpServer`: The Node.js http server from the module `http`.\n- `expressApp`: The express app. It may work with other frameworks, or even with Connect. At this time, it's only been tested with Express.\n- `timeout_millis`: The client side refresh time in milliseconds. Default is `300`.\n\n\n\nLicense\n-------\n\n(MIT License)\n\nCopyright 2013, JP Richardson  <jprichardson@gmail.com>\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jprichardson/reload/issues"
  },
  "homepage": "https://github.com/jprichardson/reload",
  "_id": "reload@0.1.0",
  "_from": "reload@"
}
